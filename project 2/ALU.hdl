// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
     // 16bits constants
    Add16(a=false,b=false, out=zero);
    // zero x and y
    Mux16(a=x,b=zero,sel=zx,out=curx);
    Mux16(a=y,b=zero,sel=zy,out=cury);
    //negate x and y
    Not16(in=curx,out=notx);
    Not16(in=cury,out=noty);
    Mux16(a=curx,b=notx,sel=nx,out=curx);
    Mux16(a=cury,b=noty,sel=ny,out=cury);
    // compute (out = x + y) or (out = x & y)?
    Add16(a=curx,b=cury, out=xPlusy);
    And16(a=curx,b=cury,out=xAndy);
    Mux16(a=xAndy,b=xPlusy,sel=f,out=outf);
    // negate the out output?
    Not16(in=outf,out=notoutf);
    Mux16(a=outf,b=notoutf,sel=no,out=out);
    // compute zr
    Or8Way(in[0]=out[0],in[1]=out[1],in[2]=out[2],in[3]=out[3],in[4]=out[4],in[5]=out[5],in[6]=out[6],in[7]=out[7],out=orFirstout);
    Or8Way(in[0]=out[8],in[1]=out[9],in[2]=out[10],in[3]=out[11],in[4]=out[12],in[5]=out[13],in[6]=out[14],in[7]=out[15],out=orSecondout);
    Or(a=orFirstout,b=orSecondout,out=notzr);
    Not(in=notzr,out=zr);
    //compute ng
    Mux(a=false,b=true,sel=out[15],out=ng);
}